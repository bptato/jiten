#!/bin/bash
set -e

# rebuild python if it's missing loadable sqlite extensions
if  ! python3 -msysconfig | grep enable-loadable-sqlite-extensions \
    > /dev/null; then
  PYTHON_VERSION="$(< runtime.txt)"
  export WORKSPACE_DIR="$(cd "$BIN_DIR"/.. || exit; pwd)/builds"
  rm -f .heroku/python/bin/python   # prevent failing ln after build
  sed -i 's!figure --pre!figure --enable-loadable-sqlite-extensions --pre!' \
    "$WORKSPACE_DIR"/runtimes/python3
  "$WORKSPACE_DIR/runtimes/$PYTHON_VERSION" /app/.heroku/python/
fi

# cache DB
for x in .heroku/vendor/{jmdict,kanji,pitch,sentences}.sqlite3; do
  if [ ! -s "$x" ]; then rm -fr .heroku/vendor/; break; fi
done
mkdir -p .heroku/vendor
touch    .heroku/vendor/{jmdict,kanji,pitch,sentences}.sqlite3
ln -srf  .heroku/vendor/{jmdict,kanji,pitch,sentences}.sqlite3 jiten/res/

# build .so & setup DB
make

# get .version (FIXME: is there no better way?)
git clone https://github.com/obfusk/jiten.git _jiten
( cd _jiten && git checkout "$SOURCE_VERSION" && make _version )
mv -v _jiten/jiten/.version jiten/
rm -fr _jiten
